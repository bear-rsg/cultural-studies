# Generated by Django 3.2.18 on 2023-03-27 10:40

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import location_field.models.plain


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='date (year)')),
                ('date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='date (month)')),
                ('date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='date (day)')),
                ('year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='year range (from)')),
                ('year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='year range (to)')),
                ('date_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('meta_created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('meta_lastupdated_datetime', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
            ],
            options={
                'verbose_name_plural': 'entities',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('other_names', models.CharField(blank=True, max_length=255, null=True)),
                ('is_a_group_of_persons', models.BooleanField(default=False)),
                ('group_of_persons_description', models.CharField(blank=True, max_length=1000, null=True)),
                ('birth_date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2030)], verbose_name='birth date (year)')),
                ('birth_date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='birth date (month)')),
                ('birth_date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='birth date (day)')),
                ('birth_year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2030)], verbose_name='birth year range (from)')),
                ('birth_year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2030)], verbose_name='birth year range (to)')),
                ('birth_date_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('death_date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2030)], verbose_name='death date (year)')),
                ('death_date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='death date (month)')),
                ('death_date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='death date (day)')),
                ('death_year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2030)], verbose_name='death year range (from)')),
                ('death_year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2030)], verbose_name='death year range (to)')),
                ('death_date_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('meta_created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('meta_lastupdated_datetime', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
            ],
        ),
        migrations.CreateModel(
            name='RelAbstract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_start_date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='relationship start date (year)')),
                ('relationship_start_date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='relationship start date (month)')),
                ('relationship_start_date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='relationship start date (day)')),
                ('relationship_start_year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='relationship start year range (from)')),
                ('relationship_start_year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='relationship start year range (to)')),
                ('relationship_start_date_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('relationship_end_date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='relationship end date (year)')),
                ('relationship_end_date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='relationship end date (month)')),
                ('relationship_end_date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='relationship end date (day)')),
                ('relationship_end_year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='relationship end year range (from)')),
                ('relationship_end_year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='relationship end year range (to)')),
                ('relationship_end_date_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('relationship_details', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SlEntityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlEventActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlEventFrequency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlEventType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlItemFindingAid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlItemMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlItemPublicationStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlItemType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlPersonTitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlTypeRelEntityAndEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlTypeRelEntityAndItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlTypeRelEntityAndPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlTypeRelEventAndItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlTypeRelEventAndPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlTypeRelItemAndItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlTypeRelItemAndPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=1000)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Upper('name'), 'id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('other_names', models.CharField(blank=True, max_length=255, null=True)),
                ('group_of_persons_description', models.CharField(blank=True, max_length=1000, null=True)),
                ('start_date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='start date (year)')),
                ('start_date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='start date (month)')),
                ('start_date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='start date (day)')),
                ('start_year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='start year range (from)')),
                ('start_year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='start year range (to)')),
                ('start_date_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('end_date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='end date (year)')),
                ('end_date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='end date (month)')),
                ('end_date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='end date (day)')),
                ('end_year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='end year range (from)')),
                ('end_year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='end year range (to)')),
                ('end_date_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='researchdata.person')),
            ],
            options={
                'verbose_name_plural': 'person histories',
            },
        ),
        migrations.AddField(
            model_name='person',
            name='title',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='researchdata.slpersontitle'),
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('item_id', models.CharField(blank=True, max_length=255, null=True)),
                ('is_a_collective_item', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('digital_materials_url', models.URLField(blank=True, null=True)),
                ('created_date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='created date (year)')),
                ('created_date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='created date (month)')),
                ('created_date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='created date (day)')),
                ('created_year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='created year range (from)')),
                ('created_year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='created year range (to)')),
                ('created_date_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('meta_created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('meta_lastupdated_datetime', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('finding_aid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='researchdata.slitemfindingaid')),
                ('language', models.ManyToManyField(blank=True, to='researchdata.SlLanguage')),
                ('media', models.ManyToManyField(blank=True, to='researchdata.SlItemMedia')),
                ('publication_status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='researchdata.slitempublicationstatus')),
                ('type', models.ManyToManyField(blank=True, to='researchdata.SlItemType')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True, verbose_name='location (search)')),
                ('location_coordinates', location_field.models.plain.PlainLocationField(blank=True, max_length=63, null=True, verbose_name='location (coordinates)')),
                ('start_date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='start date (year)')),
                ('start_date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='start date (month)')),
                ('start_date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='start date (day)')),
                ('start_year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='start year range (from)')),
                ('start_year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='start year range (to)')),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('start_date_time_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('end_date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='end date (year)')),
                ('end_date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='end date (month)')),
                ('end_date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='end date (day)')),
                ('end_year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='end year range (from)')),
                ('end_year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='end year range (to)')),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('end_date_time_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('meta_created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('meta_lastupdated_datetime', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('activity', models.ManyToManyField(blank=True, to='researchdata.SlEventActivity')),
                ('frequency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='researchdata.sleventfrequency')),
                ('language', models.ManyToManyField(blank=True, to='researchdata.SlLanguage')),
                ('type', models.ManyToManyField(blank=True, to='researchdata.SlEventType')),
            ],
        ),
        migrations.CreateModel(
            name='EntityHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('start_date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='start date (year)')),
                ('start_date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='start date (month)')),
                ('start_date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='start date (day)')),
                ('start_year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='start year range (from)')),
                ('start_year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='start year range (to)')),
                ('start_date_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('end_date_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='end date (year)')),
                ('end_date_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='end date (month)')),
                ('end_date_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='end date (day)')),
                ('end_year_range_from', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='end year range (from)')),
                ('end_year_range_to', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2030)], verbose_name='end year range (to)')),
                ('end_date_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entity_history', to='researchdata.entity')),
            ],
            options={
                'verbose_name_plural': 'entity histories',
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='type',
            field=models.ManyToManyField(blank=True, to='researchdata.SlEntityType'),
        ),
        migrations.CreateModel(
            name='RelItemAndPerson',
            fields=[
                ('relabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='researchdata.relabstract')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.item')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.person')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='researchdata.sltyperelitemandperson')),
            ],
            bases=('researchdata.relabstract',),
        ),
        migrations.CreateModel(
            name='RelItemAndItem',
            fields=[
                ('relabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='researchdata.relabstract')),
                ('item_1', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='item_1', to='researchdata.item')),
                ('item_2', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='item_2', to='researchdata.item')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='researchdata.sltyperelitemanditem')),
            ],
            bases=('researchdata.relabstract',),
        ),
        migrations.CreateModel(
            name='RelEventAndPerson',
            fields=[
                ('relabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='researchdata.relabstract')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.event')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.person')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='researchdata.sltypereleventandperson')),
            ],
            bases=('researchdata.relabstract',),
        ),
        migrations.CreateModel(
            name='RelEventAndItem',
            fields=[
                ('relabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='researchdata.relabstract')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.event')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.item')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='researchdata.sltypereleventanditem')),
            ],
            bases=('researchdata.relabstract',),
        ),
        migrations.CreateModel(
            name='RelEntityAndPerson',
            fields=[
                ('relabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='researchdata.relabstract')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.entity')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.person')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='researchdata.sltyperelentityandperson')),
            ],
            bases=('researchdata.relabstract',),
        ),
        migrations.CreateModel(
            name='RelEntityAndItem',
            fields=[
                ('relabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='researchdata.relabstract')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.entity')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.item')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='researchdata.sltyperelentityanditem')),
            ],
            bases=('researchdata.relabstract',),
        ),
        migrations.CreateModel(
            name='RelEntityAndEvent',
            fields=[
                ('relabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='researchdata.relabstract')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.entity')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='researchdata.event')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='researchdata.sltyperelentityandevent')),
            ],
            bases=('researchdata.relabstract',),
        ),
        migrations.CreateModel(
            name='RelEntityAndEntity',
            fields=[
                ('relabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='researchdata.relabstract')),
                ('entity_1', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='entity_1', to='researchdata.entity')),
                ('entity_2', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='entity_2', to='researchdata.entity')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='researchdata.sltyperelentityandevent')),
            ],
            bases=('researchdata.relabstract',),
        ),
    ]
